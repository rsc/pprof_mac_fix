.globl _version
_version:
	.ascii "Darwin Kernel Version 12.4.0: Sun Aug  4 22:58:12 EDT 2013; root:xnu-2050.24.15~1/RELEASE_X86_64 x86_64"

.globl _current_thread
_current_thread:
// 0xffffff80002b2f00 <current_thread+0>:	push   %rbp
	.byte 0x55;
// 0xffffff80002b2f01 <current_thread+1>:	mov    %rsp,%rbp
	.byte 0x48; .byte 0x89; .byte 0xe5;
// 0xffffff80002b2f04 <current_thread+4>:	mov    %gs:0x8,%rax
	.byte 0x65; .byte 0x48; .byte 0x8b; .byte 0x04; .byte 0x25; .byte 0x08; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff80002b2f0d <current_thread+13>:	pop    %rbp
	.byte 0x5d;
// 0xffffff80002b2f0e <current_thread+14>:	retq   
	.byte 0xc3;
// 0xffffff80002b2f0f <current_thread+15>:	nop    
	.byte 0x90;

.globl _bsd_ast
_bsd_ast:
// 0xffffff8000568a50 <bsd_ast+0>:	push   %rbp
	.byte 0x55;
// 0xffffff8000568a51 <bsd_ast+1>:	mov    %rsp,%rbp
	.byte 0x48; .byte 0x89; .byte 0xe5;
// 0xffffff8000568a54 <bsd_ast+4>:	push   %r15
	.byte 0x41; .byte 0x57;
// 0xffffff8000568a56 <bsd_ast+6>:	push   %r14
	.byte 0x41; .byte 0x56;
// 0xffffff8000568a58 <bsd_ast+8>:	push   %rbx
	.byte 0x53;
// 0xffffff8000568a59 <bsd_ast+9>:	sub    $0x18,%rsp
	.byte 0x48; .byte 0x83; .byte 0xec; .byte 0x18;
// 0xffffff8000568a5d <bsd_ast+13>:	mov    %rdi,%rbx
	.byte 0x48; .byte 0x89; .byte 0xfb;
// 0xffffff8000568a60 <bsd_ast+16>:	callq  0xffffff80005ea250 <current_proc>
	.byte 0xe8; .byte 0xeb; .byte 0x17; .byte 0x08; .byte 0x00;
// 0xffffff8000568a65 <bsd_ast+21>:	mov    %rax,%r15
	.byte 0x49; .byte 0x89; .byte 0xc7;
// 0xffffff8000568a68 <bsd_ast+24>:	mov    %rbx,%rdi
	.byte 0x48; .byte 0x89; .byte 0xdf;
// 0xffffff8000568a6b <bsd_ast+27>:	callq  0xffffff8000246840 <get_bsdthread_info>
	.byte 0xe8; .byte 0xd0; .byte 0xdd; .byte 0xcd; .byte 0xff;
// 0xffffff8000568a70 <bsd_ast+32>:	mov    %rax,%r14
	.byte 0x49; .byte 0x89; .byte 0xc6;
// 0xffffff8000568a73 <bsd_ast+35>:	test   %r15,%r15
	.byte 0x4d; .byte 0x85; .byte 0xff;
// 0xffffff8000568a76 <bsd_ast+38>:	je     0xffffff8000568dc1 <bsd_ast+881>
	.byte 0x0f; .byte 0x84; .byte 0x45; .byte 0x03; .byte 0x00; .byte 0x00;
// 0xffffff8000568a7c <bsd_ast+44>:	mov    $0x8020,%eax
	.byte 0xb8; .byte 0x20; .byte 0x80; .byte 0x00; .byte 0x00;
// 0xffffff8000568a81 <bsd_ast+49>:	and    0x158(%r15),%eax
	.byte 0x41; .byte 0x23; .byte 0x87; .byte 0x58; .byte 0x01; .byte 0x00; .byte 0x00;
// 0xffffff8000568a88 <bsd_ast+56>:	cmp    $0x8020,%eax
	.byte 0x3d; .byte 0x20; .byte 0x80; .byte 0x00; .byte 0x00;
// 0xffffff8000568a8d <bsd_ast+61>:	jne    0xffffff8000568ab7 <bsd_ast+103>
	.byte 0x75; .byte 0x28;
// 0xffffff8000568a8f <bsd_ast+63>:	lea    0x158(%r15),%rbx
	.byte 0x49; .byte 0x8d; .byte 0x9f; .byte 0x58; .byte 0x01; .byte 0x00; .byte 0x00;
// 0xffffff8000568a96 <bsd_ast+70>:	callq  0xffffff80002b62b0 <get_useraddr>
	.byte 0xe8; .byte 0x15; .byte 0xd8; .byte 0xd4; .byte 0xff;
// 0xffffff8000568a9b <bsd_ast+75>:	mov    %eax,%esi
	.byte 0x89; .byte 0xc6;
// 0xffffff8000568a9d <bsd_ast+77>:	mov    %r15,%rdi
	.byte 0x4c; .byte 0x89; .byte 0xff;
// 0xffffff8000568aa0 <bsd_ast+80>:	mov    $0x1,%edx
	.byte 0xba; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568aa5 <bsd_ast+85>:	callq  0xffffff8000575b10 <addupc_task>
	.byte 0xe8; .byte 0x66; .byte 0xd0; .byte 0x00; .byte 0x00;
// 0xffffff8000568aaa <bsd_ast+90>:	mov    $0xffff7fff,%edi
	.byte 0xbf; .byte 0xff; .byte 0x7f; .byte 0xff; .byte 0xff;
// 0xffffff8000568aaf <bsd_ast+95>:	mov    %rbx,%rsi
	.byte 0x48; .byte 0x89; .byte 0xde;
// 0xffffff8000568ab2 <bsd_ast+98>:	callq  0xffffff80005eb070 <OSBitAndAtomic>
	.byte 0xe8; .byte 0xb9; .byte 0x25; .byte 0x08; .byte 0x00;
// 0xffffff8000568ab7 <bsd_ast+103>:	cmpq   $0x0,0x1c0(%r15)
	.byte 0x49; .byte 0x83; .byte 0xbf; .byte 0xc0; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568abf <bsd_ast+111>:	jne    0xffffff8000568acb <bsd_ast+123>
	.byte 0x75; .byte 0x0a;
// 0xffffff8000568ac1 <bsd_ast+113>:	cmpl   $0x0,0x1c8(%r15)
	.byte 0x41; .byte 0x83; .byte 0xbf; .byte 0xc8; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568ac9 <bsd_ast+121>:	je     0xffffff8000568b3c <bsd_ast+236>
	.byte 0x74; .byte 0x71;
// 0xffffff8000568acb <bsd_ast+123>:	lea    0x1b0(%r15),%rbx
	.byte 0x49; .byte 0x8d; .byte 0x9f; .byte 0xb0; .byte 0x01; .byte 0x00; .byte 0x00;
// 0xffffff8000568ad2 <bsd_ast+130>:	mov    0x18(%r15),%rdi
	.byte 0x49; .byte 0x8b; .byte 0x7f; .byte 0x18;
// 0xffffff8000568ad6 <bsd_ast+134>:	lea    -0x1c(%rbp),%rdx
	.byte 0x48; .byte 0x8d; .byte 0x55; .byte 0xe4;
// 0xffffff8000568ada <bsd_ast+138>:	mov    $0x1,%esi
	.byte 0xbe; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568adf <bsd_ast+143>:	callq  0xffffff8000237690 <task_vtimer_update>
	.byte 0xe8; .byte 0xac; .byte 0xeb; .byte 0xcc; .byte 0xff;
// 0xffffff8000568ae4 <bsd_ast+148>:	mov    -0x1c(%rbp),%edx
	.byte 0x8b; .byte 0x55; .byte 0xe4;
// 0xffffff8000568ae7 <bsd_ast+151>:	mov    %r15,%rdi
	.byte 0x4c; .byte 0x89; .byte 0xff;
// 0xffffff8000568aea <bsd_ast+154>:	mov    %rbx,%rsi
	.byte 0x48; .byte 0x89; .byte 0xde;
// 0xffffff8000568aed <bsd_ast+157>:	callq  0xffffff80005717c0 <itimerdecr>
	.byte 0xe8; .byte 0xce; .byte 0x8c; .byte 0x00; .byte 0x00;
// 0xffffff8000568af2 <bsd_ast+162>:	test   %eax,%eax
	.byte 0x85; .byte 0xc0;
// 0xffffff8000568af4 <bsd_ast+164>:	jne    0xffffff8000568b3c <bsd_ast+236>
	.byte 0x75; .byte 0x46;
// 0xffffff8000568b0a <bsd_ast+186>:	mov    0x18(%r15),%rdi
	.byte 0x49; .byte 0x8b; .byte 0x7f; .byte 0x18;
// 0xffffff8000568b0e <bsd_ast+190>:	mov    $0x1,%esi
	.byte 0xbe; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568af6 <bsd_ast+166>:	cmpq   $0x0,0x1c0(%r15)
	.byte 0x49; .byte 0x83; .byte 0xbf; .byte 0xc0; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568afe <bsd_ast+174>:	jne    0xffffff8000568b0a <bsd_ast+186>
	jne 1f
// 0xffffff8000568b00 <bsd_ast+176>:	cmpl   $0x0,0x1c8(%r15)
	.byte 0x41; .byte 0x83; .byte 0xbf; .byte 0xc8; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568b08 <bsd_ast+184>:	je     0xffffff8000568b1a <bsd_ast+202>
	je 2f
1:
	call _task_vtimer_set
	jmp 3f
2:
	call _task_vtimer_clear
3:
	.byte 0x31; .byte 0xff;
	.byte 0x31; .byte 0xf6;
	.byte 0x65; .byte 0x48; .byte 0x8b; .byte 0x14; .byte 0x25; .byte 0x08; .byte 0x00; .byte 0x00; .byte 0x00
	.byte 0xb9; .byte 0x04; .byte 0x00; .byte 0x00; .byte 0x00
	.byte 0x41; .byte 0xb8; .byte 0x1a; .byte 0x00; .byte 0x00; .byte 0x00
// 0xffffff8000568b37 <bsd_ast+231>:	callq  0xffffff8000567340 <threadsignal+224>
	call _psignal_internal
// 0xffffff8000568b3c <bsd_ast+236>:	cmpq   $0x0,0x1e0(%r15)
	.byte 0x49; .byte 0x83; .byte 0xbf; .byte 0xe0; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568b44 <bsd_ast+244>:	jne    0xffffff8000568b50 <bsd_ast+256>
	.byte 0x75; .byte 0x0a;
// 0xffffff8000568b46 <bsd_ast+246>:	cmpl   $0x0,0x1e8(%r15)
	.byte 0x41; .byte 0x83; .byte 0xbf; .byte 0xe8; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568b4e <bsd_ast+254>:	je     0xffffff8000568bc1 <bsd_ast+369>
	.byte 0x74; .byte 0x71;
// 0xffffff8000568b50 <bsd_ast+256>:	lea    0x1d0(%r15),%rbx
	.byte 0x49; .byte 0x8d; .byte 0x9f; .byte 0xd0; .byte 0x01; .byte 0x00; .byte 0x00;
// 0xffffff8000568b57 <bsd_ast+263>:	mov    0x18(%r15),%rdi
	.byte 0x49; .byte 0x8b; .byte 0x7f; .byte 0x18;
// 0xffffff8000568b5b <bsd_ast+267>:	lea    -0x20(%rbp),%rdx
	.byte 0x48; .byte 0x8d; .byte 0x55; .byte 0xe0;
// 0xffffff8000568b5f <bsd_ast+271>:	mov    $0x2,%esi
	.byte 0xbe; .byte 0x02; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568b64 <bsd_ast+276>:	callq  0xffffff8000237690 <task_vtimer_update>
	.byte 0xe8; .byte 0x27; .byte 0xeb; .byte 0xcc; .byte 0xff;
// 0xffffff8000568b69 <bsd_ast+281>:	mov    -0x20(%rbp),%edx
	.byte 0x8b; .byte 0x55; .byte 0xe0;
// 0xffffff8000568b6c <bsd_ast+284>:	mov    %r15,%rdi
	.byte 0x4c; .byte 0x89; .byte 0xff;
// 0xffffff8000568b6f <bsd_ast+287>:	mov    %rbx,%rsi
	.byte 0x48; .byte 0x89; .byte 0xde;
// 0xffffff8000568b72 <bsd_ast+290>:	callq  0xffffff80005717c0 <itimerdecr>
	.byte 0xe8; .byte 0x49; .byte 0x8c; .byte 0x00; .byte 0x00;
// 0xffffff8000568b77 <bsd_ast+295>:	test   %eax,%eax
	.byte 0x85; .byte 0xc0;
// 0xffffff8000568b79 <bsd_ast+297>:	jne    0xffffff8000568bc1 <bsd_ast+369>
	.byte 0x75; .byte 0x46;
// 0xffffff8000568b9f <bsd_ast+335>:	mov    0x18(%r15),%rdi
	.byte 0x49; .byte 0x8b; .byte 0x7f; .byte 0x18;
// 0xffffff8000568ba3 <bsd_ast+339>:	mov    $0x2,%esi
	.byte 0xbe; .byte 0x02; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568b7b <bsd_ast+299>:	cmpq   $0x0,0x1e0(%r15)
	.byte 0x49; .byte 0x83; .byte 0xbf; .byte 0xe0; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568b83 <bsd_ast+307>:	jne    0xffffff8000568b8f <bsd_ast+319>
	.byte 0x75; .byte 0x0a;
// 0xffffff8000568b85 <bsd_ast+309>:	cmpl   $0x0,0x1e8(%r15)
	.byte 0x41; .byte 0x83; .byte 0xbf; .byte 0xe8; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568b8d <bsd_ast+317>:	je     0xffffff8000568b9f <bsd_ast+335>
	je 2f
1:
	call _task_vtimer_set
	jmp 3f
2:
	call _task_vtimer_clear
3:
	.byte 0x31; .byte 0xff;
	.byte 0x31; .byte 0xf6;
	.byte 0x65; .byte 0x48; .byte 0x8b; .byte 0x14; .byte 0x25; .byte 0x08; .byte 0x00; .byte 0x00; .byte 0x00
	.byte 0xb9; .byte 0x04; .byte 0x00; .byte 0x00; .byte 0x00
	.byte 0x41; .byte 0xb8; .byte 0x1b; .byte 0x00; .byte 0x00; .byte 0x00
	call _psignal_internal
// 0xffffff8000568bc1 <bsd_ast+369>:	cmpq   $0x0,0x1f0(%r15)
	.byte 0x49; .byte 0x83; .byte 0xbf; .byte 0xf0; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568bc9 <bsd_ast+377>:	jne    0xffffff8000568bd9 <bsd_ast+393>
	.byte 0x75; .byte 0x0e;
// 0xffffff8000568bcb <bsd_ast+379>:	cmpl   $0x0,0x1f8(%r15)
	.byte 0x41; .byte 0x83; .byte 0xbf; .byte 0xf8; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568bd3 <bsd_ast+387>:	je     0xffffff8000568c8c <bsd_ast+572>
	.byte 0x0f; .byte 0x84; .byte 0xb3; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568bd9 <bsd_ast+393>:	mov    0x18(%r15),%rdi
	.byte 0x49; .byte 0x8b; .byte 0x7f; .byte 0x18;
// 0xffffff8000568bdd <bsd_ast+397>:	lea    -0x28(%rbp),%rdx
	.byte 0x48; .byte 0x8d; .byte 0x55; .byte 0xd8;
// 0xffffff8000568be1 <bsd_ast+401>:	mov    $0x4,%esi
	.byte 0xbe; .byte 0x04; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568be6 <bsd_ast+406>:	callq  0xffffff8000237690 <task_vtimer_update>
	.byte 0xe8; .byte 0xa5; .byte 0xea; .byte 0xcc; .byte 0xff;
// 0xffffff8000568beb <bsd_ast+411>:	mov    %r15,%rdi
	.byte 0x4c; .byte 0x89; .byte 0xff;
// 0xffffff8000568bee <bsd_ast+414>:	callq  0xffffff800055a990 <proc_spinlock>
	.byte 0xe8; .byte 0x9d; .byte 0x1d; .byte 0xff; .byte 0xff;
// 0xffffff8000568bf3 <bsd_ast+419>:	cmpq   $0x0,0x1f0(%r15)
	.byte 0x49; .byte 0x83; .byte 0xbf; .byte 0xf0; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568bfb <bsd_ast+427>:	jle    0xffffff8000568c09 <bsd_ast+441>
	.byte 0x7e; .byte 0x0c;
// 0xffffff8000568bfd <bsd_ast+429>:	lea    0x1f8(%r15),%rcx
	.byte 0x49; .byte 0x8d; .byte 0x8f; .byte 0xf8; .byte 0x01; .byte 0x00; .byte 0x00;
// 0xffffff8000568c04 <bsd_ast+436>:	mov    -0x28(%rbp),%eax
	.byte 0x8b; .byte 0x45; .byte 0xd8;
// 0xffffff8000568c07 <bsd_ast+439>:	jmp    0xffffff8000568c1c <bsd_ast+460>
	.byte 0xeb; .byte 0x13;
// 0xffffff8000568c09 <bsd_ast+441>:	mov    -0x28(%rbp),%eax
	.byte 0x8b; .byte 0x45; .byte 0xd8;
// 0xffffff8000568c0c <bsd_ast+444>:	cmp    %eax,0x1f8(%r15)
	.byte 0x41; .byte 0x39; .byte 0x87; .byte 0xf8; .byte 0x01; .byte 0x00; .byte 0x00;
// 0xffffff8000568c13 <bsd_ast+451>:	jle    0xffffff8000568c4c <bsd_ast+508>
	.byte 0x7e; .byte 0x37;
// 0xffffff8000568c15 <bsd_ast+453>:	lea    0x1f8(%r15),%rcx
	.byte 0x49; .byte 0x8d; .byte 0x8f; .byte 0xf8; .byte 0x01; .byte 0x00; .byte 0x00;
// 0xffffff8000568c1c <bsd_ast+460>:	movq   $0x0,-0x30(%rbp)
	.byte 0x48; .byte 0xc7; .byte 0x45; .byte 0xd0; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568c24 <bsd_ast+468>:	mov    (%rcx),%edx
	.byte 0x8b; .byte 0x11;
// 0xffffff8000568c26 <bsd_ast+470>:	sub    %eax,%edx
	.byte 0x29; .byte 0xc2;
// 0xffffff8000568c28 <bsd_ast+472>:	mov    %edx,(%rcx)
	.byte 0x89; .byte 0x11;
// 0xffffff8000568c2a <bsd_ast+474>:	test   %edx,%edx
	.byte 0x85; .byte 0xd2;
// 0xffffff8000568c2c <bsd_ast+476>:	jns    0xffffff8000568c42 <bsd_ast+498>
	.byte 0x79; .byte 0x14;
// 0xffffff8000568c2e <bsd_ast+478>:	decq   0x1f0(%r15)
	.byte 0x49; .byte 0xff; .byte 0x8f; .byte 0xf0; .byte 0x01; .byte 0x00; .byte 0x00;
// 0xffffff8000568c35 <bsd_ast+485>:	add    $0xf4240,%edx
	.byte 0x81; .byte 0xc2; .byte 0x40; .byte 0x42; .byte 0x0f; .byte 0x00;
// 0xffffff8000568c3b <bsd_ast+491>:	mov    %edx,0x1f8(%r15)
	.byte 0x41; .byte 0x89; .byte 0x97; .byte 0xf8; .byte 0x01; .byte 0x00; .byte 0x00;
// 0xffffff8000568c42 <bsd_ast+498>:	mov    %r15,%rdi
	.byte 0x4c; .byte 0x89; .byte 0xff;
// 0xffffff8000568c45 <bsd_ast+501>:	callq  0xffffff800055a9b0 <proc_spinunlock>
	.byte 0xe8; .byte 0x66; .byte 0x1d; .byte 0xff; .byte 0xff;
// 0xffffff8000568c4a <bsd_ast+506>:	jmp    0xffffff8000568c8c <bsd_ast+572>
	.byte 0xeb; .byte 0x40;
// 0xffffff8000568c4c <bsd_ast+508>:	movl   $0x0,0x1f8(%r15)
	.byte 0x41; .byte 0xc7; .byte 0x87; .byte 0xf8; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568c57 <bsd_ast+519>:	movq   $0x0,0x1f0(%r15)
	.byte 0x49; .byte 0xc7; .byte 0x87; .byte 0xf0; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568c62 <bsd_ast+530>:	mov    %r15,%rdi
	.byte 0x4c; .byte 0x89; .byte 0xff;
// 0xffffff8000568c65 <bsd_ast+533>:	callq  0xffffff800055a9b0 <proc_spinunlock>
	.byte 0xe8; .byte 0x46; .byte 0x1d; .byte 0xff; .byte 0xff;
// 0xffffff8000568c6a <bsd_ast+538>:	mov    0x18(%r15),%rdi
	.byte 0x49; .byte 0x8b; .byte 0x7f; .byte 0x18;
// 0xffffff8000568c6e <bsd_ast+542>:	mov    $0x4,%esi
	.byte 0xbe; .byte 0x04; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568c73 <bsd_ast+547>:	callq  0xffffff8000237660 <task_vtimer_clear>
	.byte 0xe8; .byte 0xe8; .byte 0xe9; .byte 0xcc; .byte 0xff;
// 0xffffff8000568c78 <bsd_ast+552>:	mov    %r15,%rdi
	.byte 0x4c; .byte 0x89; .byte 0xff;
// 0xffffff8000568c7b <bsd_ast+555>:	xor    %esi,%esi
	.byte 0x31; .byte 0xf6;
// 0xffffff8000568c7d <bsd_ast+557>:	xor    %edx,%edx
	.byte 0x31; .byte 0xd2;
// 0xffffff8000568c7f <bsd_ast+559>:	xor    %ecx,%ecx
	.byte 0x31; .byte 0xc9;
// 0xffffff8000568c81 <bsd_ast+561>:	mov    $0x18,%r8d
	.byte 0x41; .byte 0xb8; .byte 0x18; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568c87 <bsd_ast+567>:	callq  0xffffff8000567340 <threadsignal+224>
	.byte 0xe8; .byte 0xb4; .byte 0xe6; .byte 0xff; .byte 0xff;
// 0xffffff8000568c8c <bsd_ast+572>:	movzbl 0x27d(%r14),%r8d
	.byte 0x45; .byte 0x0f; .byte 0xb6; .byte 0x86; .byte 0x7d; .byte 0x02; .byte 0x00; .byte 0x00;
// 0xffffff8000568c94 <bsd_ast+580>:	test   %r8d,%r8d
	.byte 0x45; .byte 0x85; .byte 0xc0;
// 0xffffff8000568c97 <bsd_ast+583>:	je     0xffffff8000568caf <bsd_ast+607>
	.byte 0x74; .byte 0x16;
// 0xffffff8000568c99 <bsd_ast+585>:	movb   $0x0,0x27d(%r14)
	.byte 0x41; .byte 0xc6; .byte 0x86; .byte 0x7d; .byte 0x02; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568ca1 <bsd_ast+593>:	mov    %r15,%rdi
	.byte 0x4c; .byte 0x89; .byte 0xff;
// 0xffffff8000568ca4 <bsd_ast+596>:	xor    %esi,%esi
	.byte 0x31; .byte 0xf6;
// 0xffffff8000568ca6 <bsd_ast+598>:	xor    %edx,%edx
	.byte 0x31; .byte 0xd2;
// 0xffffff8000568ca8 <bsd_ast+600>:	xor    %ecx,%ecx
	.byte 0x31; .byte 0xc9;
// 0xffffff8000568caa <bsd_ast+602>:	callq  0xffffff8000567340 <threadsignal+224>
	.byte 0xe8; .byte 0x91; .byte 0xe6; .byte 0xff; .byte 0xff;
// 0xffffff8000568caf <bsd_ast+607>:	cmpb   $0x0,0x27c(%r14)
	.byte 0x41; .byte 0x80; .byte 0xbe; .byte 0x7c; .byte 0x02; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568cb7 <bsd_ast+615>:	je     0xffffff8000568ce2 <bsd_ast+658>
	.byte 0x74; .byte 0x29;
// 0xffffff8000568cb9 <bsd_ast+617>:	movb   $0x0,0x27c(%r14)
	.byte 0x41; .byte 0xc6; .byte 0x86; .byte 0x7c; .byte 0x02; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568cc1 <bsd_ast+625>:	mov    %r15,%rdi
	.byte 0x4c; .byte 0x89; .byte 0xff;
// 0xffffff8000568cc4 <bsd_ast+628>:	callq  0xffffff8000559910 <proc_lock>
	.byte 0xe8; .byte 0x47; .byte 0x0c; .byte 0xff; .byte 0xff;
// 0xffffff8000568cc9 <bsd_ast+633>:	movb   $0x1,0x270(%r15)
	.byte 0x41; .byte 0xc6; .byte 0x87; .byte 0x70; .byte 0x02; .byte 0x00; .byte 0x00; .byte 0x01;
// 0xffffff8000568cd1 <bsd_ast+641>:	mov    %r15,%rdi
	.byte 0x4c; .byte 0x89; .byte 0xff;
// 0xffffff8000568cd4 <bsd_ast+644>:	callq  0xffffff8000559920 <proc_unlock>
	.byte 0xe8; .byte 0x47; .byte 0x0c; .byte 0xff; .byte 0xff;
// 0xffffff8000568cd9 <bsd_ast+649>:	mov    0x18(%r15),%rdi
	.byte 0x49; .byte 0x8b; .byte 0x7f; .byte 0x18;
// 0xffffff8000568cdd <bsd_ast+653>:	callq  0xffffff8000236540 <task_suspend>
	.byte 0xe8; .byte 0x5e; .byte 0xd8; .byte 0xcc; .byte 0xff;
// 0xffffff8000568ce2 <bsd_ast+658>:	mov    0x280(%r14),%rdi
	.byte 0x49; .byte 0x8b; .byte 0xbe; .byte 0x80; .byte 0x02; .byte 0x00; .byte 0x00;
// 0xffffff8000568ce9 <bsd_ast+665>:	test   %rdi,%rdi
	.byte 0x48; .byte 0x85; .byte 0xff;
// 0xffffff8000568cec <bsd_ast+668>:	je     0xffffff8000568d41 <bsd_ast+753>
	.byte 0x74; .byte 0x53;
// 0xffffff8000568cee <bsd_ast+670>:	callq  0xffffff800055cfb0 <proc_find>
	.byte 0xe8; .byte 0xbd; .byte 0x42; .byte 0xff; .byte 0xff;
// 0xffffff8000568cf3 <bsd_ast+675>:	mov    %rax,%rbx
	.byte 0x48; .byte 0x89; .byte 0xc3;
// 0xffffff8000568cf6 <bsd_ast+678>:	movq   $0x0,0x280(%r14)
	.byte 0x49; .byte 0xc7; .byte 0x86; .byte 0x80; .byte 0x02; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568d01 <bsd_ast+689>:	test   %rbx,%rbx
	.byte 0x48; .byte 0x85; .byte 0xdb;
// 0xffffff8000568d04 <bsd_ast+692>:	je     0xffffff8000568d41 <bsd_ast+753>
	.byte 0x74; .byte 0x3b;
// 0xffffff8000568d06 <bsd_ast+694>:	mov    %rbx,%rdi
	.byte 0x48; .byte 0x89; .byte 0xdf;
// 0xffffff8000568d09 <bsd_ast+697>:	callq  0xffffff8000559910 <proc_lock>
	.byte 0xe8; .byte 0x02; .byte 0x0c; .byte 0xff; .byte 0xff;
// 0xffffff8000568d0e <bsd_ast+702>:	cmpb   $0x0,0x270(%rbx)
	.byte 0x80; .byte 0xbb; .byte 0x70; .byte 0x02; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568d15 <bsd_ast+709>:	je     0xffffff8000568d31 <bsd_ast+737>
	.byte 0x74; .byte 0x1a;
// 0xffffff8000568d17 <bsd_ast+711>:	movb   $0x0,0x270(%rbx)
	.byte 0xc6; .byte 0x83; .byte 0x70; .byte 0x02; .byte 0x00; .byte 0x00; .byte 0x00;
// 0xffffff8000568d1e <bsd_ast+718>:	mov    %rbx,%rdi
	.byte 0x48; .byte 0x89; .byte 0xdf;
// 0xffffff8000568d21 <bsd_ast+721>:	callq  0xffffff8000559920 <proc_unlock>
	.byte 0xe8; .byte 0xfa; .byte 0x0b; .byte 0xff; .byte 0xff;
// 0xffffff8000568d26 <bsd_ast+726>:	mov    0x18(%rbx),%rdi
	.byte 0x48; .byte 0x8b; .byte 0x7b; .byte 0x18;
// 0xffffff8000568d2a <bsd_ast+730>:	callq  0xffffff8000236650 <task_resume>
	.byte 0xe8; .byte 0x21; .byte 0xd9; .byte 0xcc; .byte 0xff;
// 0xffffff8000568d2f <bsd_ast+735>:	jmp    0xffffff8000568d39 <bsd_ast+745>
	.byte 0xeb; .byte 0x08;
// 0xffffff8000568d31 <bsd_ast+737>:	mov    %rbx,%rdi
	.byte 0x48; .byte 0x89; .byte 0xdf;
// 0xffffff8000568d34 <bsd_ast+740>:	callq  0xffffff8000559920 <proc_unlock>
	.byte 0xe8; .byte 0xe7; .byte 0x0b; .byte 0xff; .byte 0xff;
// 0xffffff8000568d39 <bsd_ast+745>:	mov    %rbx,%rdi
	.byte 0x48; .byte 0x89; .byte 0xdf;
// 0xffffff8000568d3c <bsd_ast+748>:	callq  0xffffff800055d040 <proc_rele>
	.byte 0xe8; .byte 0xff; .byte 0x42; .byte 0xff; .byte 0xff;
// 0xffffff8000568d41 <bsd_ast+753>:	mov    %r15,%rdi
	.byte 0x4c; .byte 0x89; .byte 0xff;
// 0xffffff8000568d44 <bsd_ast+756>:	callq  0xffffff8000559910 <proc_lock>
	.byte 0xe8; .byte 0xc7; .byte 0x0b; .byte 0xff; .byte 0xff;
// 0xffffff8000568d49 <bsd_ast+761>:	callq  0xffffff80002b2f00 <current_thread>
	.byte 0xe8; .byte 0xb2; .byte 0xa1; .byte 0xd4; .byte 0xff;
// 0xffffff8000568d4e <bsd_ast+766>:	mov    %rax,%rdi
	.byte 0x48; .byte 0x89; .byte 0xc7;
// 0xffffff8000568d51 <bsd_ast+769>:	callq  0xffffff800023bbc0 <thread_should_halt>
	.byte 0xe8; .byte 0x6a; .byte 0x2e; .byte 0xcd; .byte 0xff;
// 0xffffff8000568d56 <bsd_ast+774>:	test   %eax,%eax
	.byte 0x85; .byte 0xc0;
// 0xffffff8000568d58 <bsd_ast+776>:	jne    0xffffff8000568da3 <bsd_ast+851>
	.byte 0x75; .byte 0x49;
// 0xffffff8000568d5a <bsd_ast+778>:	mov    0x150(%r14),%eax
	.byte 0x41; .byte 0x8b; .byte 0x86; .byte 0x50; .byte 0x01; .byte 0x00; .byte 0x00;
// 0xffffff8000568d61 <bsd_ast+785>:	mov    0x158(%r14),%ecx
	.byte 0x41; .byte 0x8b; .byte 0x8e; .byte 0x58; .byte 0x01; .byte 0x00; .byte 0x00;
// 0xffffff8000568d68 <bsd_ast+792>:	xor    %edx,%edx
	.byte 0x31; .byte 0xd2;
// 0xffffff8000568d6a <bsd_ast+794>:	testb  $0x4,0x15d(%r15)
	.byte 0x41; .byte 0xf6; .byte 0x87; .byte 0x5d; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x04;
// 0xffffff8000568d72 <bsd_ast+802>:	jne    0xffffff8000568d7b <bsd_ast+811>
	.byte 0x75; .byte 0x07;
// 0xffffff8000568d74 <bsd_ast+804>:	mov    0x2bc(%r15),%edx
	.byte 0x41; .byte 0x8b; .byte 0x97; .byte 0xbc; .byte 0x02; .byte 0x00; .byte 0x00;
// 0xffffff8000568d7b <bsd_ast+811>:	or     %edx,%ecx
	.byte 0x09; .byte 0xd1;
// 0xffffff8000568d7d <bsd_ast+813>:	or     $0x10100,%ecx
	.byte 0x81; .byte 0xc9; .byte 0x00; .byte 0x01; .byte 0x01; .byte 0x00;
// 0xffffff8000568d83 <bsd_ast+819>:	xor    $0xfffefeff,%ecx
	.byte 0x81; .byte 0xf1; .byte 0xff; .byte 0xfe; .byte 0xfe; .byte 0xff;
// 0xffffff8000568d89 <bsd_ast+825>:	test   %ecx,%eax
	.byte 0x85; .byte 0xc8;
// 0xffffff8000568d8b <bsd_ast+827>:	jne    0xffffff8000568d97 <bsd_ast+839>
	.byte 0x75; .byte 0x0a;
// 0xffffff8000568d8d <bsd_ast+829>:	jmp    0xffffff8000568da3 <bsd_ast+851>
	.byte 0xeb; .byte 0x14;
// 0xffffff8000568d8f <bsd_ast+831>:	nop    
	.byte 0x90;
// 0xffffff8000568d90 <bsd_ast+832>:	mov    %eax,%edi
	.byte 0x89; .byte 0xc7;
// 0xffffff8000568d92 <bsd_ast+834>:	callq  0xffffff8000568670 <postsig_locked>
	.byte 0xe8; .byte 0xd9; .byte 0xf8; .byte 0xff; .byte 0xff;
// 0xffffff8000568d97 <bsd_ast+839>:	mov    %r15,%rdi
	.byte 0x4c; .byte 0x89; .byte 0xff;
// 0xffffff8000568d9a <bsd_ast+842>:	callq  0xffffff8000567ce0 <issignal_locked>
	.byte 0xe8; .byte 0x41; .byte 0xef; .byte 0xff; .byte 0xff;
// 0xffffff8000568d9f <bsd_ast+847>:	test   %eax,%eax
	.byte 0x85; .byte 0xc0;
// 0xffffff8000568da1 <bsd_ast+849>:	jne    0xffffff8000568d90 <bsd_ast+832>
	.byte 0x75; .byte 0xed;
// 0xffffff8000568da3 <bsd_ast+851>:	mov    %r15,%rdi
	.byte 0x4c; .byte 0x89; .byte 0xff;
// 0xffffff8000568da6 <bsd_ast+854>:	callq  0xffffff8000559920 <proc_unlock>
	.byte 0xe8; .byte 0x75; .byte 0x0b; .byte 0xff; .byte 0xff;
// 0xffffff8000568dab <bsd_ast+859>:	mov    0x34097f(%rip),%al        # 0xffffff80008a9730
	.byte 0x8a; .byte 0x05; .byte 0x7f; .byte 0x09; .byte 0x34; .byte 0x00;
// 0xffffff8000568db1 <bsd_ast+865>:	test   %al,%al
	.byte 0x84; .byte 0xc0;
// 0xffffff8000568db3 <bsd_ast+867>:	jne    0xffffff8000568dc1 <bsd_ast+881>
	.byte 0x75; .byte 0x0c;
// 0xffffff8000568db5 <bsd_ast+869>:	movb   $0x1,0x340974(%rip)        # 0xffffff80008a9730
	.byte 0xc6; .byte 0x05; .byte 0x74; .byte 0x09; .byte 0x34; .byte 0x00; .byte 0x01;
// 0xffffff8000568dbc <bsd_ast+876>:	callq  0xffffff8000539050 <bsdinit_task>
	.byte 0xe8; .byte 0x8f; .byte 0x02; .byte 0xfd; .byte 0xff;
// 0xffffff8000568dc1 <bsd_ast+881>:	add    $0x18,%rsp
	.byte 0x48; .byte 0x83; .byte 0xc4; .byte 0x18;
// 0xffffff8000568dc5 <bsd_ast+885>:	pop    %rbx
	.byte 0x5b;
// 0xffffff8000568dc6 <bsd_ast+886>:	pop    %r14
	.byte 0x41; .byte 0x5e;
// 0xffffff8000568dc8 <bsd_ast+888>:	pop    %r15
	.byte 0x41; .byte 0x5f;
// 0xffffff8000568dca <bsd_ast+890>:	pop    %rbp
	.byte 0x5d;
// 0xffffff8000568dcb <bsd_ast+891>:	retq   
	.byte 0xc3;
// 0xffffff8000568dcc <bsd_ast+892>:	nopl   0x0(%rax)
	.byte 0x0f; .byte 0x1f; .byte 0x40; .byte 0x00;

.globl _main
_main:
	ret

.globl _psignal_internal
_psignal_internal:
	ret

.globl _task_vtimer_clear
_task_vtimer_clear:
	ret

.globl _task_vtimer_set
_task_vtimer_set:
	ret
