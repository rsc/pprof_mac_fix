.p2align 12
_version:
	.ascii "Darwin Kernel Version 10.8.0: Tue Jun  7 16:33:36 PDT 2011; root:xnu-1504.15.3~1/RELEASE_I386\0"

.globl _main
_main:
	ret

.globl _psignal_internal
_psignal_internal:
	ret

.globl _task_vtimer_clear
_task_vtimer_clear:
	ret

.globl _task_vtimer_set
_task_vtimer_set:
	ret

.globl _current_thread
_current_thread:
// 0x002a413a <current_thread+0>:	push   %ebp
	.byte 0x55;
// 0x002a413b <current_thread+1>:	mov    %esp,%ebp
	.byte 0x89; .byte 0xe5;
// 0x002a413d <current_thread+3>:	mov    %gs:0x4,%eax
	.byte 0x65; .byte 0xa1; .byte 0x04; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x002a4143 <current_thread+9>:	leave  
	.byte 0xc9;
// 0x002a4144 <current_thread+10>:	ret    
	.byte 0xc3;

.globl _bsd_ast
_bsd_ast:
// 0x0048fb9a <bsd_ast+0>:	push   %ebp
	.byte 0x55;
// 0x0048fb9b <bsd_ast+1>:	mov    %esp,%ebp
	.byte 0x89; .byte 0xe5;
// 0x0048fb9d <bsd_ast+3>:	push   %esi
	.byte 0x56;
// 0x0048fb9e <bsd_ast+4>:	push   %ebx
	.byte 0x53;
// 0x0048fb9f <bsd_ast+5>:	sub    $0x20,%esp
	.byte 0x83; .byte 0xec; .byte 0x20;
// 0x0048fba2 <bsd_ast+8>:	call   0x5046ce <current_proc>
	.byte 0xe8; .byte 0x27; .byte 0x4b; .byte 0x07; .byte 0x00;
// 0x0048fba7 <bsd_ast+13>:	mov    %eax,%ebx
	.byte 0x89; .byte 0xc3;
// 0x0048fba9 <bsd_ast+15>:	mov    0x8(%ebp),%eax
	.byte 0x8b; .byte 0x45; .byte 0x08;
// 0x0048fbac <bsd_ast+18>:	mov    %eax,(%esp)
	.byte 0x89; .byte 0x04; .byte 0x24;
// 0x0048fbaf <bsd_ast+21>:	call   0x235e2b <get_bsdthread_info>
	.byte 0xe8; .byte 0x77; .byte 0x62; .byte 0xda; .byte 0xff;
// 0x0048fbb4 <bsd_ast+26>:	mov    %eax,%esi
	.byte 0x89; .byte 0xc6;
// 0x0048fbb6 <bsd_ast+28>:	test   %ebx,%ebx
	.byte 0x85; .byte 0xdb;
// 0x0048fbb8 <bsd_ast+30>:	je     0x48fee5 <bsd_ast+843>
	.byte 0x0f; .byte 0x84; .byte 0x27; .byte 0x03; .byte 0x00; .byte 0x00;
// 0x0048fbbe <bsd_ast+36>:	mov    0xa8(%ebx),%eax
	.byte 0x8b; .byte 0x83; .byte 0xa8; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fbc4 <bsd_ast+42>:	and    $0x8020,%eax
	.byte 0x25; .byte 0x20; .byte 0x80; .byte 0x00; .byte 0x00;
// 0x0048fbc9 <bsd_ast+47>:	cmp    $0x8020,%eax
	.byte 0x3d; .byte 0x20; .byte 0x80; .byte 0x00; .byte 0x00;
// 0x0048fbce <bsd_ast+52>:	jne    0x48fc07 <bsd_ast+109>
	.byte 0x75; .byte 0x37;
// 0x0048fbd0 <bsd_ast+54>:	call   0x2a898a <get_useraddr>
	.byte 0xe8; .byte 0xb5; .byte 0x8d; .byte 0xe1; .byte 0xff;
// 0x0048fbd5 <bsd_ast+59>:	movl   $0x1,0xc(%esp)
	.byte 0xc7; .byte 0x44; .byte 0x24; .byte 0x0c; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fbdd <bsd_ast+67>:	mov    %eax,0x4(%esp)
	.byte 0x89; .byte 0x44; .byte 0x24; .byte 0x04;
// 0x0048fbe1 <bsd_ast+71>:	movl   $0x0,0x8(%esp)
	.byte 0xc7; .byte 0x44; .byte 0x24; .byte 0x08; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fbe9 <bsd_ast+79>:	mov    %ebx,(%esp)
	.byte 0x89; .byte 0x1c; .byte 0x24;
// 0x0048fbec <bsd_ast+82>:	call   0x49b9a6 <addupc_task>
	.byte 0xe8; .byte 0xb5; .byte 0xbd; .byte 0x00; .byte 0x00;
// 0x0048fbf1 <bsd_ast+87>:	lea    0xa8(%ebx),%eax
	.byte 0x8d; .byte 0x83; .byte 0xa8; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fbf7 <bsd_ast+93>:	mov    %eax,0x4(%esp)
	.byte 0x89; .byte 0x44; .byte 0x24; .byte 0x04;
// 0x0048fbfb <bsd_ast+97>:	movl   $0xffff7fff,(%esp)
	.byte 0xc7; .byte 0x04; .byte 0x24; .byte 0xff; .byte 0x7f; .byte 0xff; .byte 0xff;
// 0x0048fc02 <bsd_ast+104>:	call   0x504e0a <OSBitAndAtomic>
	.byte 0xe8; .byte 0x03; .byte 0x52; .byte 0x07; .byte 0x00;
// 0x0048fc07 <bsd_ast+109>:	mov    0xec(%ebx),%eax
	.byte 0x8b; .byte 0x83; .byte 0xec; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fc0d <bsd_ast+115>:	test   %eax,%eax
	.byte 0x85; .byte 0xc0;
// 0x0048fc0f <bsd_ast+117>:	jne    0x48fc1f <bsd_ast+133>
	.byte 0x75; .byte 0x0e;
// 0x0048fc11 <bsd_ast+119>:	mov    0xf0(%ebx),%eax
	.byte 0x8b; .byte 0x83; .byte 0xf0; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fc17 <bsd_ast+125>:	test   %eax,%eax
	.byte 0x85; .byte 0xc0;
// 0x0048fc19 <bsd_ast+127>:	je     0x48fcac <bsd_ast+274>
	.byte 0x0f; .byte 0x84; .byte 0x8d; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fc1f <bsd_ast+133>:	mov    0xc(%ebx),%edx
	.byte 0x8b; .byte 0x53; .byte 0x0c;
// 0x0048fc22 <bsd_ast+136>:	lea    -0xc(%ebp),%eax
	.byte 0x8d; .byte 0x45; .byte 0xf4;
// 0x0048fc25 <bsd_ast+139>:	mov    %eax,0x8(%esp)
	.byte 0x89; .byte 0x44; .byte 0x24; .byte 0x08;
// 0x0048fc29 <bsd_ast+143>:	movl   $0x1,0x4(%esp)
	.byte 0xc7; .byte 0x44; .byte 0x24; .byte 0x04; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fc31 <bsd_ast+151>:	mov    %edx,(%esp)
	.byte 0x89; .byte 0x14; .byte 0x24;
// 0x0048fc34 <bsd_ast+154>:	call   0x22d18c <task_vtimer_update>
	.byte 0xe8; .byte 0x53; .byte 0xd5; .byte 0xd9; .byte 0xff;
// 0x0048fc39 <bsd_ast+159>:	lea    0xe4(%ebx),%edx
	.byte 0x8d; .byte 0x93; .byte 0xe4; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fc3f <bsd_ast+165>:	mov    -0xc(%ebp),%eax
	.byte 0x8b; .byte 0x45; .byte 0xf4;
// 0x0048fc42 <bsd_ast+168>:	mov    %eax,0x8(%esp)
	.byte 0x89; .byte 0x44; .byte 0x24; .byte 0x08;
// 0x0048fc46 <bsd_ast+172>:	mov    %edx,0x4(%esp)
	.byte 0x89; .byte 0x54; .byte 0x24; .byte 0x04;
// 0x0048fc4a <bsd_ast+176>:	mov    %ebx,(%esp)
	.byte 0x89; .byte 0x1c; .byte 0x24;
// 0x0048fc4d <bsd_ast+179>:	call   0x4976a6 <itimerdecr>
	.byte 0xe8; .byte 0x54; .byte 0x7a; .byte 0x00; .byte 0x00;
// 0x0048fc52 <bsd_ast+184>:	test   %eax,%eax
	.byte 0x85; .byte 0xc0;
// 0x0048fc54 <bsd_ast+186>:	jne    0x48fcac <bsd_ast+274>
	.byte 0x75; .byte 0x56;
// 0x0048fc7f <bsd_ast+229>:	mov    0xc(%ebx),%eax
	.byte 0x8b; .byte 0x43; .byte 0x0c;
// 0x0048fc82 <bsd_ast+232>:	movl   $0x1,0x4(%esp)
	.byte 0xc7; .byte 0x44; .byte 0x24; .byte 0x04; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fc8a <bsd_ast+240>:	mov    %eax,(%esp)
	.byte 0x89; .byte 0x04; .byte 0x24;
// 0x0048fc56 <bsd_ast+188>:	mov    0xec(%ebx),%ecx
	.byte 0x8b; .byte 0x8b; .byte 0xec; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fc5c <bsd_ast+194>:	test   %ecx,%ecx
	.byte 0x85; .byte 0xc9;
// 0x0048fc5e <bsd_ast+196>:	jne    0x48fc6a <bsd_ast+208>
	.byte 0x75; .byte 0x0a;
// 0x0048fc60 <bsd_ast+198>:	mov    0xf0(%ebx),%edx
	.byte 0x8b; .byte 0x93; .byte 0xf0; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fc66 <bsd_ast+204>:	test   %edx,%edx
	.byte 0x85; .byte 0xd2;
// 0x0048fc68 <bsd_ast+206>:	je     0x48fc7f <bsd_ast+229>
	je 2f
1:
	call _task_vtimer_set
	jmp 3f
2:
	call _task_vtimer_clear
3:
	xor %eax, %eax
	xor %edx, %edx
	mov %gs:0x4, %ecx
	movl $4, 0(%esp)
	movl $0x1a, 4(%esp)
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	call _psignal_internal
// 0x0048fcac <bsd_ast+274>:	mov    0xfc(%ebx),%eax
	.byte 0x8b; .byte 0x83; .byte 0xfc; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fcb2 <bsd_ast+280>:	test   %eax,%eax
	.byte 0x85; .byte 0xc0;
// 0x0048fcb4 <bsd_ast+282>:	jne    0x48fcc4 <bsd_ast+298>
	.byte 0x75; .byte 0x0e;
// 0x0048fcb6 <bsd_ast+284>:	mov    0x100(%ebx),%eax
	.byte 0x8b; .byte 0x83; .byte 0x00; .byte 0x01; .byte 0x00; .byte 0x00;
// 0x0048fcbc <bsd_ast+290>:	test   %eax,%eax
	.byte 0x85; .byte 0xc0;
// 0x0048fcbe <bsd_ast+292>:	je     0x48fd51 <bsd_ast+439>
	.byte 0x0f; .byte 0x84; .byte 0x8d; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fcc4 <bsd_ast+298>:	mov    0xc(%ebx),%edx
	.byte 0x8b; .byte 0x53; .byte 0x0c;
// 0x0048fcc7 <bsd_ast+301>:	lea    -0xc(%ebp),%eax
	.byte 0x8d; .byte 0x45; .byte 0xf4;
// 0x0048fcca <bsd_ast+304>:	mov    %eax,0x8(%esp)
	.byte 0x89; .byte 0x44; .byte 0x24; .byte 0x08;
// 0x0048fcce <bsd_ast+308>:	movl   $0x2,0x4(%esp)
	.byte 0xc7; .byte 0x44; .byte 0x24; .byte 0x04; .byte 0x02; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fcd6 <bsd_ast+316>:	mov    %edx,(%esp)
	.byte 0x89; .byte 0x14; .byte 0x24;
// 0x0048fcd9 <bsd_ast+319>:	call   0x22d18c <task_vtimer_update>
	.byte 0xe8; .byte 0xae; .byte 0xd4; .byte 0xd9; .byte 0xff;
// 0x0048fcde <bsd_ast+324>:	lea    0xf4(%ebx),%edx
	.byte 0x8d; .byte 0x93; .byte 0xf4; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fce4 <bsd_ast+330>:	mov    -0xc(%ebp),%eax
	.byte 0x8b; .byte 0x45; .byte 0xf4;
// 0x0048fce7 <bsd_ast+333>:	mov    %eax,0x8(%esp)
	.byte 0x89; .byte 0x44; .byte 0x24; .byte 0x08;
// 0x0048fceb <bsd_ast+337>:	mov    %edx,0x4(%esp)
	.byte 0x89; .byte 0x54; .byte 0x24; .byte 0x04;
// 0x0048fcef <bsd_ast+341>:	mov    %ebx,(%esp)
	.byte 0x89; .byte 0x1c; .byte 0x24;
// 0x0048fcf2 <bsd_ast+344>:	call   0x4976a6 <itimerdecr>
	.byte 0xe8; .byte 0xaf; .byte 0x79; .byte 0x00; .byte 0x00;
// 0x0048fcf7 <bsd_ast+349>:	test   %eax,%eax
	.byte 0x85; .byte 0xc0;
// 0x0048fcf9 <bsd_ast+351>:	jne    0x48fd51 <bsd_ast+439>
	.byte 0x75; .byte 0x56;
// 0x0048fd24 <bsd_ast+394>:	mov    0xc(%ebx),%eax
	.byte 0x8b; .byte 0x43; .byte 0x0c;
// 0x0048fd27 <bsd_ast+397>:	movl   $0x2,0x4(%esp)
	.byte 0xc7; .byte 0x44; .byte 0x24; .byte 0x04; .byte 0x02; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fd2f <bsd_ast+405>:	mov    %eax,(%esp)
	.byte 0x89; .byte 0x04; .byte 0x24;
// 0x0048fcfb <bsd_ast+353>:	mov    0xfc(%ebx),%eax
	.byte 0x8b; .byte 0x83; .byte 0xfc; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fd01 <bsd_ast+359>:	test   %eax,%eax
	.byte 0x85; .byte 0xc0;
// 0x0048fd03 <bsd_ast+361>:	jne    0x48fd0f <bsd_ast+373>
	.byte 0x75; .byte 0x0a;
// 0x0048fd05 <bsd_ast+363>:	mov    0x100(%ebx),%eax
	.byte 0x8b; .byte 0x83; .byte 0x00; .byte 0x01; .byte 0x00; .byte 0x00;
// 0x0048fd0b <bsd_ast+369>:	test   %eax,%eax
	.byte 0x85; .byte 0xc0;
// 0x0048fd0d <bsd_ast+371>:	je     0x48fd24 <bsd_ast+394>
	je 2f
1:
	call _task_vtimer_set
	jmp 3f
2:
	call _task_vtimer_clear
3:
	xor %eax, %eax
	xor %edx, %edx
	mov %gs:0x4, %ecx
	movl $4, 0(%esp)
	movl $0x1b, 4(%esp)
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	call _psignal_internal
// 0x0048fd51 <bsd_ast+439>:	mov    0x104(%ebx),%eax
	.byte 0x8b; .byte 0x83; .byte 0x04; .byte 0x01; .byte 0x00; .byte 0x00;
// 0x0048fd57 <bsd_ast+445>:	test   %eax,%eax
	.byte 0x85; .byte 0xc0;
// 0x0048fd59 <bsd_ast+447>:	jne    0x48fd69 <bsd_ast+463>
	.byte 0x75; .byte 0x0e;
// 0x0048fd5b <bsd_ast+449>:	mov    0x108(%ebx),%eax
	.byte 0x8b; .byte 0x83; .byte 0x08; .byte 0x01; .byte 0x00; .byte 0x00;
// 0x0048fd61 <bsd_ast+455>:	test   %eax,%eax
	.byte 0x85; .byte 0xc0;
// 0x0048fd63 <bsd_ast+457>:	je     0x48fe25 <bsd_ast+651>
	.byte 0x0f; .byte 0x84; .byte 0xbc; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fd69 <bsd_ast+463>:	lea    -0x10(%ebp),%eax
	.byte 0x8d; .byte 0x45; .byte 0xf0;
// 0x0048fd6c <bsd_ast+466>:	mov    0xc(%ebx),%edx
	.byte 0x8b; .byte 0x53; .byte 0x0c;
// 0x0048fd6f <bsd_ast+469>:	mov    %eax,0x8(%esp)
	.byte 0x89; .byte 0x44; .byte 0x24; .byte 0x08;
// 0x0048fd73 <bsd_ast+473>:	movl   $0x4,0x4(%esp)
	.byte 0xc7; .byte 0x44; .byte 0x24; .byte 0x04; .byte 0x04; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fd7b <bsd_ast+481>:	mov    %edx,(%esp)
	.byte 0x89; .byte 0x14; .byte 0x24;
// 0x0048fd7e <bsd_ast+484>:	call   0x22d18c <task_vtimer_update>
	.byte 0xe8; .byte 0x09; .byte 0xd4; .byte 0xd9; .byte 0xff;
// 0x0048fd83 <bsd_ast+489>:	mov    %ebx,(%esp)
	.byte 0x89; .byte 0x1c; .byte 0x24;
// 0x0048fd86 <bsd_ast+492>:	call   0x4827bc <proc_spinlock>
	.byte 0xe8; .byte 0x31; .byte 0x2a; .byte 0xff; .byte 0xff;
// 0x0048fd8b <bsd_ast+497>:	mov    0x104(%ebx),%edx
	.byte 0x8b; .byte 0x93; .byte 0x04; .byte 0x01; .byte 0x00; .byte 0x00;
// 0x0048fd91 <bsd_ast+503>:	test   %edx,%edx
	.byte 0x85; .byte 0xd2;
// 0x0048fd93 <bsd_ast+505>:	jg     0x48fda2 <bsd_ast+520>
	.byte 0x7f; .byte 0x0d;
// 0x0048fd95 <bsd_ast+507>:	mov    0x108(%ebx),%eax
	.byte 0x8b; .byte 0x83; .byte 0x08; .byte 0x01; .byte 0x00; .byte 0x00;
// 0x0048fd9b <bsd_ast+513>:	cmp    -0x10(%ebp),%eax
	.byte 0x3b; .byte 0x45; .byte 0xf0;
// 0x0048fd9e <bsd_ast+516>:	jg     0x48fda8 <bsd_ast+526>
	.byte 0x7f; .byte 0x08;
// 0x0048fda0 <bsd_ast+518>:	jmp    0x48fddc <bsd_ast+578>
	.byte 0xeb; .byte 0x3a;
// 0x0048fda2 <bsd_ast+520>:	mov    0x108(%ebx),%eax
	.byte 0x8b; .byte 0x83; .byte 0x08; .byte 0x01; .byte 0x00; .byte 0x00;
// 0x0048fda8 <bsd_ast+526>:	mov    %edx,0x104(%ebx)
	.byte 0x89; .byte 0x93; .byte 0x04; .byte 0x01; .byte 0x00; .byte 0x00;
// 0x0048fdae <bsd_ast+532>:	sub    -0x10(%ebp),%eax
	.byte 0x2b; .byte 0x45; .byte 0xf0;
// 0x0048fdb1 <bsd_ast+535>:	mov    %eax,0x108(%ebx)
	.byte 0x89; .byte 0x83; .byte 0x08; .byte 0x01; .byte 0x00; .byte 0x00;
// 0x0048fdb7 <bsd_ast+541>:	test   %eax,%eax
	.byte 0x85; .byte 0xc0;
// 0x0048fdb9 <bsd_ast+543>:	jns    0x48fdcb <bsd_ast+561>
	.byte 0x79; .byte 0x10;
// 0x0048fdbb <bsd_ast+545>:	decl   0x104(%ebx)
	.byte 0xff; .byte 0x8b; .byte 0x04; .byte 0x01; .byte 0x00; .byte 0x00;
// 0x0048fdc1 <bsd_ast+551>:	addl   $0xf4240,0x108(%ebx)
	.byte 0x81; .byte 0x83; .byte 0x08; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x40; .byte 0x42; .byte 0x0f; .byte 0x00;
// 0x0048fdcb <bsd_ast+561>:	movl   $0x0,-0x14(%ebp)
	.byte 0xc7; .byte 0x45; .byte 0xec; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fdd2 <bsd_ast+568>:	mov    %ebx,(%esp)
	.byte 0x89; .byte 0x1c; .byte 0x24;
// 0x0048fdd5 <bsd_ast+571>:	call   0x4827af <proc_spinunlock>
	.byte 0xe8; .byte 0xd5; .byte 0x29; .byte 0xff; .byte 0xff;
// 0x0048fdda <bsd_ast+576>:	jmp    0x48fe25 <bsd_ast+651>
	.byte 0xeb; .byte 0x49;
// 0x0048fddc <bsd_ast+578>:	movl   $0x0,0x108(%ebx)
	.byte 0xc7; .byte 0x83; .byte 0x08; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fde6 <bsd_ast+588>:	movl   $0x0,0x104(%ebx)
	.byte 0xc7; .byte 0x83; .byte 0x04; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fdf0 <bsd_ast+598>:	mov    %ebx,(%esp)
	.byte 0x89; .byte 0x1c; .byte 0x24;
// 0x0048fdf3 <bsd_ast+601>:	call   0x4827af <proc_spinunlock>
	.byte 0xe8; .byte 0xb7; .byte 0x29; .byte 0xff; .byte 0xff;
// 0x0048fdf8 <bsd_ast+606>:	mov    0xc(%ebx),%eax
	.byte 0x8b; .byte 0x43; .byte 0x0c;
// 0x0048fdfb <bsd_ast+609>:	movl   $0x4,0x4(%esp)
	.byte 0xc7; .byte 0x44; .byte 0x24; .byte 0x04; .byte 0x04; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fe03 <bsd_ast+617>:	mov    %eax,(%esp)
	.byte 0x89; .byte 0x04; .byte 0x24;
// 0x0048fe06 <bsd_ast+620>:	call   0x22bb22 <task_vtimer_clear>
	call _task_vtimer_clear
// 0x0048fe0b <bsd_ast+625>:	movl   $0x18,0x4(%esp)
	.byte 0xc7; .byte 0x44; .byte 0x24; .byte 0x04; .byte 0x18; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fe13 <bsd_ast+633>:	movl   $0x0,(%esp)
	.byte 0xc7; .byte 0x04; .byte 0x24; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fe1a <bsd_ast+640>:	xor    %ecx,%ecx
	.byte 0x31; .byte 0xc9;
// 0x0048fe1c <bsd_ast+642>:	xor    %edx,%edx
	.byte 0x31; .byte 0xd2;
// 0x0048fe1e <bsd_ast+644>:	mov    %ebx,%eax
	.byte 0x89; .byte 0xd8;
// 0x0048fe20 <bsd_ast+646>:	call   0x48e9a2 <sigprocmask+496>
	call _psignal_internal
// 0x0048fe25 <bsd_ast+651>:	movzbl 0x19d(%esi),%eax
	.byte 0x0f; .byte 0xb6; .byte 0x86; .byte 0x9d; .byte 0x01; .byte 0x00; .byte 0x00;
// 0x0048fe2c <bsd_ast+658>:	test   %al,%al
	.byte 0x84; .byte 0xc0;
// 0x0048fe2e <bsd_ast+660>:	je     0x48fe50 <bsd_ast+694>
	.byte 0x74; .byte 0x20;
// 0x0048fe30 <bsd_ast+662>:	movb   $0x0,0x19d(%esi)
	.byte 0xc6; .byte 0x86; .byte 0x9d; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fe37 <bsd_ast+669>:	movzbl %al,%eax
	.byte 0x0f; .byte 0xb6; .byte 0xc0;
// 0x0048fe3a <bsd_ast+672>:	mov    %eax,0x4(%esp)
	.byte 0x89; .byte 0x44; .byte 0x24; .byte 0x04;
// 0x0048fe3e <bsd_ast+676>:	movl   $0x0,(%esp)
	.byte 0xc7; .byte 0x04; .byte 0x24; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fe45 <bsd_ast+683>:	xor    %ecx,%ecx
	.byte 0x31; .byte 0xc9;
// 0x0048fe47 <bsd_ast+685>:	xor    %edx,%edx
	.byte 0x31; .byte 0xd2;
// 0x0048fe49 <bsd_ast+687>:	mov    %ebx,%eax
	.byte 0x89; .byte 0xd8;
// 0x0048fe4b <bsd_ast+689>:	call   0x48e9a2 <sigprocmask+496>
	.byte 0xe8; .byte 0x52; .byte 0xeb; .byte 0xff; .byte 0xff;
// 0x0048fe50 <bsd_ast+694>:	cmpb   $0x0,0x19c(%esi)
	.byte 0x80; .byte 0xbe; .byte 0x9c; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fe57 <bsd_ast+701>:	je     0x48fe7a <bsd_ast+736>
	.byte 0x74; .byte 0x21;
// 0x0048fe59 <bsd_ast+703>:	movb   $0x0,0x19c(%esi)
	.byte 0xc6; .byte 0x86; .byte 0x9c; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fe60 <bsd_ast+710>:	movl   $0x11,0x4(%esp)
	.byte 0xc7; .byte 0x44; .byte 0x24; .byte 0x04; .byte 0x11; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fe68 <bsd_ast+718>:	movl   $0x0,(%esp)
	.byte 0xc7; .byte 0x04; .byte 0x24; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fe6f <bsd_ast+725>:	xor    %ecx,%ecx
	.byte 0x31; .byte 0xc9;
// 0x0048fe71 <bsd_ast+727>:	xor    %edx,%edx
	.byte 0x31; .byte 0xd2;
// 0x0048fe73 <bsd_ast+729>:	mov    %ebx,%eax
	.byte 0x89; .byte 0xd8;
// 0x0048fe75 <bsd_ast+731>:	call   0x48e9a2 <sigprocmask+496>
	.byte 0xe8; .byte 0x28; .byte 0xeb; .byte 0xff; .byte 0xff;
// 0x0048fe7a <bsd_ast+736>:	call   0x2a413a <current_thread>
	.byte 0xe8; .byte 0xbb; .byte 0x42; .byte 0xe1; .byte 0xff;
// 0x0048fe7f <bsd_ast+741>:	mov    %eax,(%esp)
	.byte 0x89; .byte 0x04; .byte 0x24;
// 0x0048fe82 <bsd_ast+744>:	call   0x22d64b <thread_should_halt>
	.byte 0xe8; .byte 0xc4; .byte 0xd7; .byte 0xd9; .byte 0xff;
// 0x0048fe87 <bsd_ast+749>:	test   %eax,%eax
	.byte 0x85; .byte 0xc0;
// 0x0048fe89 <bsd_ast+751>:	jne    0x48fecc <bsd_ast+818>
	.byte 0x75; .byte 0x41;
// 0x0048fe8b <bsd_ast+753>:	mov    0xf4(%esi),%ecx
	.byte 0x8b; .byte 0x8e; .byte 0xf4; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fe91 <bsd_ast+759>:	mov    0xfc(%esi),%eax
	.byte 0x8b; .byte 0x86; .byte 0xfc; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fe97 <bsd_ast+765>:	xor    %edx,%edx
	.byte 0x31; .byte 0xd2;
// 0x0048fe99 <bsd_ast+767>:	testb  $0x4,0xad(%ebx)
	.byte 0xf6; .byte 0x83; .byte 0xad; .byte 0x00; .byte 0x00; .byte 0x00; .byte 0x04;
// 0x0048fea0 <bsd_ast+774>:	jne    0x48fea8 <bsd_ast+782>
	.byte 0x75; .byte 0x06;
// 0x0048fea2 <bsd_ast+776>:	mov    0x194(%ebx),%edx
	.byte 0x8b; .byte 0x93; .byte 0x94; .byte 0x01; .byte 0x00; .byte 0x00;
// 0x0048fea8 <bsd_ast+782>:	or     %eax,%edx
	.byte 0x09; .byte 0xc2;
// 0x0048feaa <bsd_ast+784>:	and    $0xfffefeff,%edx
	.byte 0x81; .byte 0xe2; .byte 0xff; .byte 0xfe; .byte 0xfe; .byte 0xff;
// 0x0048feb0 <bsd_ast+790>:	not    %edx
	.byte 0xf7; .byte 0xd2;
// 0x0048feb2 <bsd_ast+792>:	test   %edx,%ecx
	.byte 0x85; .byte 0xd1;
// 0x0048feb4 <bsd_ast+794>:	je     0x48fecc <bsd_ast+818>
	.byte 0x74; .byte 0x16;
// 0x0048feb6 <bsd_ast+796>:	jmp    0x48fec0 <bsd_ast+806>
	.byte 0xeb; .byte 0x08;
// 0x0048feb8 <bsd_ast+798>:	mov    %eax,(%esp)
	.byte 0x89; .byte 0x04; .byte 0x24;
// 0x0048febb <bsd_ast+801>:	call   0x48ce67 <postsig>
	.byte 0xe8; .byte 0xa7; .byte 0xcf; .byte 0xff; .byte 0xff;
// 0x0048fec0 <bsd_ast+806>:	mov    %ebx,(%esp)
	.byte 0x89; .byte 0x1c; .byte 0x24;
// 0x0048fec3 <bsd_ast+809>:	call   0x48f5ea <issignal>
	.byte 0xe8; .byte 0x22; .byte 0xf7; .byte 0xff; .byte 0xff;
// 0x0048fec8 <bsd_ast+814>:	test   %eax,%eax
	.byte 0x85; .byte 0xc0;
// 0x0048feca <bsd_ast+816>:	jne    0x48feb8 <bsd_ast+798>
	.byte 0x75; .byte 0xec;
// 0x0048fecc <bsd_ast+818>:	mov    0x8777c0,%ebx
	.byte 0x8b; .byte 0x1d; .byte 0xc0; .byte 0x77; .byte 0x87; .byte 0x00;
// 0x0048fed2 <bsd_ast+824>:	test   %ebx,%ebx
	.byte 0x85; .byte 0xdb;
// 0x0048fed4 <bsd_ast+826>:	jne    0x48fee5 <bsd_ast+843>
	.byte 0x75; .byte 0x0f;
// 0x0048fed6 <bsd_ast+828>:	movl   $0x1,0x8777c0
	.byte 0xc7; .byte 0x05; .byte 0xc0; .byte 0x77; .byte 0x87; .byte 0x00; .byte 0x01; .byte 0x00; .byte 0x00; .byte 0x00;
// 0x0048fee0 <bsd_ast+838>:	call   0x469646 <bsdinit_task>
	.byte 0xe8; .byte 0x61; .byte 0x97; .byte 0xfd; .byte 0xff;
// 0x0048fee5 <bsd_ast+843>:	add    $0x20,%esp
	.byte 0x83; .byte 0xc4; .byte 0x20;
// 0x0048fee8 <bsd_ast+846>:	pop    %ebx
	.byte 0x5b;
// 0x0048fee9 <bsd_ast+847>:	pop    %esi
	.byte 0x5e;
// 0x0048feea <bsd_ast+848>:	leave  
	.byte 0xc9;
// 0x0048feeb <bsd_ast+849>:	ret    
	.byte 0xc3;
